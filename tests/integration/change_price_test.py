import asyncio

import pytest
from pytest_mock import MockerFixture
from telethon.tl.custom import Message
from telethon.tl.types import ReplyInlineMarkup

from tests.integration import constants


@pytest.mark.asyncio(scope="module")
async def test_my_items_empty(start_bot, conv, mocker: MockerFixture, user_product_item_1,
                              user_product_item_change_start_price):
    await conv.send_message("/start")
    await conv.get_response()
    link_example = constants.link_example
    mocker.patch("db.user_service.UserService.get_user_products", return_value=[user_product_item_1])
    mocker.patch('api.api_service.get_image', return_value=link_example)
    mocker.patch('db.user_service.UserService.patch_start_price')
    mocker.patch('db.user_service.UserService.get_user_product_by_number',
                 return_value=user_product_item_change_start_price)
    await conv.send_message("üõç –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")
    resp: Message = await conv.get_response()
    reply_markup: ReplyInlineMarkup = resp.reply_markup
    result = await resp.click(text='–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã')
    edited_response: Message = await conv.get_edit()
    edited_reply_markup: ReplyInlineMarkup = edited_response.reply_markup
    assert edited_response.text == (f'[\u200b]({link_example})–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: C–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏\n'
                                    f'–ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: 420.0'
                                    f'\n–ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–º–µ–Ω–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: 420.0\n–†–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–µ: 0.0\n'
                                    f'–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: –≤—Å–µ–≥–¥–∞')
    assert edited_reply_markup == reply_markup
    assert result.message == '–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞'
